package pasa.cbentley.jpasc.pcore.client;

import java.util.List;

import pasa.cbentley.jpasc.pcore.rpc.model.Connection;
import pasa.cbentley.jpasc.pcore.rpc.model.DecodeOpHashResult;
import pasa.cbentley.jpasc.pcore.rpc.model.DecryptedPayload;
import pasa.cbentley.jpasc.pcore.rpc.model.NodeStatus;
import pasa.cbentley.jpasc.pcore.rpc.model.SignResult;

public interface IPascalCoinClientTools {
   /** 
    * Adds a node to connect                                                                          
    * @param nodes String containing 1 or multiple IP:port separated by ';'
    * @return Returns an integer with nodes added 
    */
   public Integer addNode(String nodes);

   /**
    * Returns information of the Node in a JSON Object
    * @return JSON Object with information 
    */
   public NodeStatus getNodeStatus();

   /**
    * Decodes block/account/n_operation info of a 32 bytes ophash
    * @param ophash HEXASTRING with an ophash (ophash is 32 bytes, so must be 64 hexa valid chars)
    * @return DecodeOpHashResult Object. Its fields mean the following:
    * 
    * "block" : Integer. Block number. 0=unknown or pending
    * "account" : Integer. Account number
    * "n_operation" : Integer. n_operation used by the account. n_operation is an incremental value, cannot be used twice on same account.
    * "md160hash" : HEXASTRING with MD160 hash
    */
   public DecodeOpHashResult decodeOpHash(String ophash);

   /**
    * Locks the Wallet if it has a password, otherwise wallet cannot be locked
    * @return Returns a Boolean indicating if Wallet is locked. If false that means that Wallet has an empty password and cannot be locked */
   public Boolean lock();

   /**
    * Signs a digest message using a public key
    * @param digest: HEXASTRING with the message to sign
    * @param encPubKey: Public key in encoded format
    * @param b58PubKey: Public key in b58 format 
    * @return SignResult object: { digest : HEXASTRING with the message to sign-enc_pubkey : HEXASTRING with the public key that used to sign "digest" data- signature : HEXASTRING with signature}
    */
   public SignResult signMessage(String digest, String encPubKey, String b58PubKey);

   /**
    * Returns all the current connections
    * @return JSON Array with Connection Objects 
    */
   public List<Connection> getConnections();

   /**
    * Returns a HEXASTRING with decrypted text (a payload) using private keys in the wallet or a list of Passwords (used in "aes" encryption)
    *
    * @param payload: HEXASTRING - Encrypted data 
    * @param pwds: List of passwords to use 
    * If using one of private keys is able to decrypt payload then returns value "key" in payload_method and enc_pubkey contains encoded public key in HEXASTRING
    * If using one of passwords to decrypt payload then returns value "pwd" in payload_method and pwd contains password used
    * @return Decryped payload */
   public DecryptedPayload payloadDecrypt(String payload, String[] pwds);

   /**
    * Encrypt a text "payload" using "payload_method"
    * @param payload: HEXASTRING - Text to encrypt in hexadecimal format 
    * @param payloadMethod: Payload method. Possible values are 'aes' 'pubkey' or 'none'
    * @param pwd: Using a Password. Must provide pwd param 
    * @param encPubKey: Public key in encoded format to use if payloadMethod='pubkey'
    * @param b58PubKey: Public key in b58 format to use if payloadMethod='pubkey'
    * @return Returns a HEXASTRING with encrypted payload */
   public String payloadEncrypt(String payload, String payloadMethod, String pwd, String encPubKey, String b58PubKey);

   /**
    * Changes the password of the Wallet. (Must be previously unlocked) 
    * Note: If pwd param is empty String, then wallet will be not protected by password
    * @param pwd: New password
    * @return Returns a Boolean if Wallet password changed with new pwd password */
   public Boolean setWalletPassword(String pwd);

   /**
    * Starts the node and the server. Starts connection process
    *  @return Boolean "true" */
   public Boolean startNode();

   /**
    * Stops the node and the server. Closes all connections
    *  @return Boolean true */
   public Boolean stopNode();

   /**
    * Unlocks a locked Wallet using "pwd" param
    * @param pwd  Wallet password
    * @return Returns a Boolean indicating if Wallet is unlocked after using pwd password */
   public Boolean unlock(String pwd);

   /**
    * Verify if a digest message is signed by a public key
    * @param digest: HEXASTRING with the message to sign
    * @param encPubKey: Public key in encoded format
    * @param signature: Signature generated by signMessage function
    * @return SignResult object: { digest : HEXASTRING with the message to sign-enc_pubkey : HEXASTRING with the public key that used to sign "digest" data- signature : HEXASTRING with signature}
    */
   public SignResult verifySign(String digest, String encPubKey, String signature);

}
